{"version":3,"sources":["components/common/Header.js","components/home/Home.js","api/httpRequest.js","api/nbaApi.js","api/teams.js","components/common/LoadingSpinner.js","components/standings/AllStandingsTable.js","components/standings/ConfStandingsTable.js","components/standings/Standings.js","components/Routes.js","components/App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","Navbar","inverse","collapseOnSelect","Brand","Link","to","Toggle","Collapse","Nav","lib","NavItem","pullRight","eventKey","href","Home","React","Component","httpRequest","url","Promise","resolve","reject","fetch","method","then","res","setTimeout","json","catch","err","nbaApi","conferenceStandings","allStandings","teams","isNBAFranchise","isAllStar","city","altCityName","fullName","tricode","teamId","nickname","urlName","confName","divName","LoadingSpinner","ClipLoader_default","sizeUnit","size","color","loading","this","props","AllStandingsTable","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","error","data","columns","accessor","_this2","teamStandings","league","standard","map","standing","team","TEAMS","find","setState","es","sortable","showPagination","defaultPageSize","length","_this$state","common_LoadingSpinner","renderTable","ConfStandingsTable","eastConfStandings","westConfStandings","east","conference","west","getStandings","conf","console","log","Standings","activeButton","handleAllClick","bind","assertThisInitialized","handleConfClick","handleDivClick","buttonStyle","all","div","ButtonToolbar","Button","bsSize","bsStyle","onClick","standings_AllStandingsTable","standings_ConfStandingsTable","renderButtons","Routes","Switch","Route","exact","path","component","App","common_Header","components_Routes","Boolean","window","location","hostname","match","ReactDOM","render","BrowserRouter","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6a207681.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { LinkContainer } from 'react-router-bootstrap';\nimport {Nav, Navbar, NavItem} from 'react-bootstrap';\n\nconst Header = () => {\n\n    return (\n        <div className=\"Header\">\n            <Navbar inverse collapseOnSelect>\n                <Navbar.Header>\n                    <Navbar.Brand>\n                        <Link to='/'>Home</Link>\n                    </Navbar.Brand>\n                    <Navbar.Toggle />\n                </Navbar.Header>\n                <Navbar.Collapse>\n                    <Nav >\n                        <LinkContainer to=\"/standings\">\n                            <NavItem>Standings</NavItem>\n                        </LinkContainer>\n                        <LinkContainer to=\"/login\">\n                            <NavItem>Login</NavItem>\n                        </LinkContainer>\n                    </Nav>\n                    <Nav pullRight>\n                        <NavItem eventKey={1} href=\"#\">\n                            Link Right\n                        </NavItem>\n                        <NavItem eventKey={2} href=\"#\">\n                            Link Right\n                        </NavItem>\n                    </Nav>\n                </Navbar.Collapse>\n            </Navbar>\n        </div>\n    );\n}\n\nexport default Header;","import React from 'react';\n\nclass Home extends React.Component {\n    render(){\n        return (\n            <div className=\"jumbotron\">\n                <h1>NBA Client</h1>\n            </div>\n        );\n    }\n}\n\nexport default Home;","const getRequest = function(url) {  \n    return new Promise((resolve, reject) => {\n        fetch('http://data.nba.net' + url, {\n          method: \"GET\"\n        })\n        .then(res => {\n            setTimeout(function() {\n              resolve(res.json());\n            }, 1000);\n        })\n        .catch(err => {\n          reject(err);\n        });\n    });\n}\n\nexport default {\n    getRequest\n}","import httpRequest from './httpRequest';\nconst seasonScheduleYear = \"2018\";\n\nconst getCurrentDate = function() {\n    return new Promise((resolve, reject) => {\n        httpRequest.getRequest('/10s/prod/v1/today.json')\n        .then(today => {\n            resolve(today.links.currentDate);\n        })\n        .then(err => {\n            reject(err);\n        })\n    });\n}\n\nconst getCalendar = function() {\n    return new Promise((resolve, reject) => {\n        httpRequest.getRequest('/prod/v1/calendar.json')\n        .then(today => {\n            resolve(today.calendar);\n        })\n        .then(err => {\n            reject(err);\n        })\n    });\n}\n\nconst getTodayScoreboard = function() {\n    return new Promise((resolve, reject) => {\n        getCurrentDate().then(currentDate => {\n            httpRequest.getRequest('/prod/v1/' + currentDate + '/scoreboard.json')\n            .then(todayScoreboard => {\n                resolve(todayScoreboard);\n            })\n            .then(err => {\n                reject(err);\n            })\n        })\n    });\n}\n\nconst getScoreboard = function(gameDate) {\n    return new Promise((resolve, reject) => {\n        httpRequest.getRequest('/prod/v2/' + gameDate +'/scoreboard.json')\n        .then(scoreboard => {\n            resolve(scoreboard);\n        })\n        .then(err => {\n            reject(err);\n        })\n    });\n}\n\nconst getTeams = function() {\n    return new Promise((resolve, reject) => {\n        httpRequest.getRequest('/prod/v2/' + seasonScheduleYear + '/teams.json')\n        .then(teams => {\n            resolve(teams);\n        })\n        .then(err => {\n            reject(err);\n        })\n    });\n}\n\nconst getPlayers = function() {\n    return new Promise((resolve, reject) => {\n        httpRequest.getRequest('/prod/v1/' + seasonScheduleYear + '/players.json')\n        .then(players => {\n            resolve(players);\n        })\n        .then(err => {\n            reject(err);\n        })\n    });\n}\n\nconst getAllStarRoster = function() {\n    return new Promise((resolve, reject) => {\n        httpRequest.getRequest('/prod/v1/allstar' + seasonScheduleYear + '/AS_roster.json')\n        .then(allStarRoster => {\n            resolve(allStarRoster);\n        })\n        .then(err => {\n            reject(err);\n        })\n    });\n}\n\nconst getCoaches = function() {\n    return new Promise((resolve, reject) => {\n        httpRequest.getRequest('/prod/v1/' + seasonScheduleYear + '/coaches.json')\n        .then(coaches => {\n            resolve(coaches);\n        })\n        .then(err => {\n            reject(err);\n        })\n    });\n}\n\nconst getSchedule = function() {\n    return new Promise((resolve, reject) => {\n        httpRequest.getRequest('/prod/v1/' + seasonScheduleYear + '/schedule.json')\n        .then(schedule => {\n            resolve(schedule);\n        })\n        .then(err => {\n            reject(err);\n        })\n    });\n}\n\nconst getConferenceStandings = function() {\n    return new Promise((resolve, reject) => {\n        httpRequest.getRequest('/prod/v1/current/standings_conference.json')\n        .then(conferenceStandings => {\n            resolve(conferenceStandings);\n        })\n        .then(err => {\n            reject(err);\n        })\n    });\n}\n\nconst getDivisionStandings = function() {\n    return new Promise((resolve, reject) => {\n        httpRequest.getRequest('/prod/v1/current/standings_division.json')\n        .then(divisionStandings => {\n            resolve(divisionStandings);\n        })\n        .then(err => {\n            reject(err);\n        })\n    });\n}\n\nconst getAllStandings = function() {\n    return new Promise((resolve, reject) => {\n        httpRequest.getRequest('/prod/v1/current/standings_all.json')\n        .then(allStandings => {\n            resolve(allStandings);\n        })\n        .then(err => {\n            reject(err);\n        })\n    });\n}\n\nconst getMiniStandings = function() {\n    return new Promise((resolve, reject) => {\n        httpRequest.getRequest('/prod/v1/current/standings_all_no_sort_keys.json')\n        .then(miniStandings => {\n            resolve(miniStandings);\n        })\n        .then(err => {\n            reject(err);\n        })\n    });\n}\n\nconst getTeamStatsRankings = function() {\n    return new Promise((resolve, reject) => {\n        httpRequest.getRequest('/prod/v1/' + seasonScheduleYear + '/team_stats_rankings.json')\n        .then(teamStatsRankings => {\n            resolve(teamStatsRankings);\n        })\n        .then(err => {\n            reject(err);\n        })\n    });\n}\n\nconst getLastFiveGameTeamStats = function() {\n    return new Promise((resolve, reject) => {\n        httpRequest.getRequest('/prod/v1/' + seasonScheduleYear + '/team_stats_last_five_games.json')\n        .then(lastFiveGameTeamStats => {\n            resolve(lastFiveGameTeamStats);\n        })\n        .then(err => {\n            reject(err);\n        })\n    });\n}\n\nconst getPreviewArticle = function(gameDate, gameId) {\n    return new Promise((resolve, reject) => {\n        httpRequest.getRequest('/prod/v1/' + gameDate + '/' + gameId + '_preview_article.json')\n        .then(previewArticle => {\n            resolve(previewArticle);\n        })\n        .then(err => {\n            reject(err);\n        })\n    });\n}\n\nconst getRecapArticle = function(gameDate, gameId) {\n    return new Promise((resolve, reject) => {\n        httpRequest.getRequest('/prod/v1/' + gameDate + '/' + gameId + '_recap_article.json')\n        .then(recapArticle => {\n            resolve(recapArticle);\n        })\n        .then(err => {\n            reject(err);\n        })\n    });\n}\n\nconst getBookPdf = function(gameDate, gameId) {\n    return new Promise((resolve, reject) => {\n        httpRequest.getRequest('/prod/v1/' + gameDate + '/' + gameId + '_Book.json')\n        .then(bookPdf => {\n            resolve(bookPdf);\n        })\n        .then(err => {\n            reject(err);\n        })\n    });\n}\n\nconst getBoxscore = function(gameDate, gameId) {\n    return new Promise((resolve, reject) => {\n        httpRequest.getRequest('/prod/v1/' + gameDate + '/' + gameId + '_boxscore.json')\n        .then(boxscore => {\n            resolve(boxscore);\n        })\n        .then(err => {\n            reject(err);\n        })\n    });\n}\n\nconst getMiniBoxscore = function(gameDate, gameId) {\n    return new Promise((resolve, reject) => {\n        httpRequest.getRequest('/prod/v1/' + gameDate + '/' + gameId + '_mini_boxscore.json')\n        .then(miniBoxscore => {\n            resolve(miniBoxscore);\n        })\n        .then(err => {\n            reject(err);\n        })\n    });\n}\n\nconst getPbp = function(gameDate, gameId, periodNum) {\n    return new Promise((resolve, reject) => {\n        httpRequest.getRequest('/prod/v1/' + gameDate + '/' + gameId + '_pbp_' + periodNum + '.json')\n        .then(miniBoxscore => {\n            resolve(miniBoxscore);\n        })\n        .then(err => {\n            reject(err);\n        })\n    });\n}\n\nconst getLeadTracker = function(gameDate, gameId, periodNum) {\n    return new Promise((resolve, reject) => {\n        httpRequest.getRequest('/prod/v1/' + gameDate + '/' + gameId + '_lead_tracker_' + periodNum + '.json')\n        .then(leadTracker => {\n            resolve(leadTracker);\n        })\n        .then(err => {\n            reject(err);\n        })\n    });\n}\n\nconst getPlayerGameLog = function(personId) {\n    return new Promise((resolve, reject) => {\n        httpRequest.getRequest('/prod/v1/' + seasonScheduleYear + '/players/' + personId + '_gamelog.json')\n        .then(playerGameLog => {\n            resolve(playerGameLog);\n        })\n        .then(err => {\n            reject(err);\n        })\n    });\n}\n\nconst getPlayerProfile = function(personId) {\n    return new Promise((resolve, reject) => {\n        httpRequest.getRequest('/prod/v1/' + seasonScheduleYear + '/players/' + personId + '_profile.json')\n        .then(playerProfile => {\n            resolve(playerProfile);\n        })\n        .then(err => {\n            reject(err);\n        })\n    });\n}\n\nconst getPlayerUberStats = function(personId) {\n    return new Promise((resolve, reject) => {\n        httpRequest.getRequest('/prod/v1/' + seasonScheduleYear + '/players/' + personId + '_uber_stats.json')\n        .then(payerUberStats => {\n            resolve(payerUberStats);\n        })\n        .then(err => {\n            reject(err);\n        })\n    });\n}\n\nconst getTeamSchedule = function(teamUrlCode) {\n    return new Promise((resolve, reject) => {\n        httpRequest.getRequest('/prod/v1/' + seasonScheduleYear + '/teams/' + teamUrlCode + '/schedule.json')\n        .then(teamSchedule => {\n            resolve(teamSchedule);\n        })\n        .then(err => {\n            reject(err);\n        })\n    });\n}\n\nconst getTeamsConfig = function() {\n    return new Promise((resolve, reject) => {\n        httpRequest.getRequest('/prod/' + seasonScheduleYear + '/teams_config.json')\n        .then(payerUberStats => {\n            resolve(payerUberStats);\n        })\n        .then(err => {\n            reject(err);\n        })\n    });\n}\n\nconst getTeamRoster = function(teamUrlCode) {\n    return new Promise((resolve, reject) => {\n        httpRequest.getRequest('/prod/v1/' + seasonScheduleYear + '/teams/' + teamUrlCode + '/roster.json')\n        .then(teamRoster => {\n            resolve(teamRoster);\n        })\n        .then(err => {\n            reject(err);\n        })\n    });\n}\n\nconst getTeamConfigYear = function(scheduleYear) {\n    return new Promise((resolve, reject) => {\n        httpRequest.getRequest('/prod/' + scheduleYear + '/teams_config.json')\n        .then(teamConfigYear => {\n            resolve(teamConfigYear);\n        })\n        .then(err => {\n            reject(err);\n        })\n    });\n}\n\nconst getTeamScheduleYear = function(scheduleYear, teamUrlCode) {\n    return new Promise((resolve, reject) => {\n        httpRequest.getRequest('/prod/v1/' + scheduleYear + '/teams/' + teamUrlCode + '/schedule.json')\n        .then(teamScheduleYear => {\n            resolve(teamScheduleYear);\n        })\n        .then(err => {\n            reject(err);\n        })\n    });\n}\n\nconst getTeamLeaders = function(teamUrlCode) {\n    return new Promise((resolve, reject) => {\n        httpRequest.getRequest('/prod/v1/' + seasonScheduleYear + '/teams/' + teamUrlCode + '/leaders.json')\n        .then(teamLeaders => {\n            resolve(teamLeaders);\n        })\n        .then(err => {\n            reject(err);\n        })\n    });\n}\n\nconst getTeamScheduleYear2 = function(scheduleYear, teamId) {\n    return new Promise((resolve, reject) => {\n        httpRequest.getRequest('/prod/v1/' + scheduleYear + '/teams/' + teamId + '/schedule.json')\n        .then(teamScheduleYear => {\n            resolve(teamScheduleYear);\n        })\n        .then(err => {\n            reject(err);\n        })\n    });\n}\n\nconst getTeamLeaders2 = function(teamId) {\n    return new Promise((resolve, reject) => {\n        httpRequest.getRequest('/prod/v1/' + seasonScheduleYear + '/teams/' + teamId + '/leaders.json')\n        .then(teamLeaders => {\n            resolve(teamLeaders);\n        })\n        .then(err => {\n            reject(err);\n        })\n    });\n}\n\nconst getPlayoffsBracket = function() {\n    return new Promise((resolve, reject) => {\n        httpRequest.getRequest('/prod/v1/' + seasonScheduleYear + '/playoffsBracket.json')\n        .then(playoffsBracket => {\n            resolve(playoffsBracket);\n        })\n        .then(err => {\n            reject(err);\n        })\n    });\n}\n\nconst getPlayoffSeriesLeaders = function(seriesId) {\n    return new Promise((resolve, reject) => {\n        httpRequest.getRequest('/prod/v1/' + seasonScheduleYear + '/playoffs_' + seriesId + '_leaders.json')\n        .then(playoffSeriesLeaders => {\n            resolve(playoffSeriesLeaders);\n        })\n        .then(err => {\n            reject(err);\n        })\n    });\n}\n\nexport default {\n    getCurrentDate,\n    getCalendar,\n    getTodayScoreboard,\n    getScoreboard,\n    getTeams,\n    getPlayers,\n    getAllStarRoster,\n    getCoaches,\n    getSchedule,\n    getConferenceStandings,\n    getDivisionStandings,\n    getAllStandings,\n    getMiniStandings,\n    getTeamStatsRankings,\n    getLastFiveGameTeamStats,\n    getPreviewArticle,\n    getRecapArticle,\n    getBookPdf,\n    getBoxscore,\n    getMiniBoxscore,\n    getPbp,\n    getLeadTracker,\n    getPlayerGameLog,\n    getPlayerProfile,\n    getPlayerUberStats,\n    getTeamSchedule,\n    getTeamsConfig,\n    getTeamRoster,\n    getTeamConfigYear,\n    getTeamScheduleYear,\n    getTeamLeaders,\n    getTeamScheduleYear2,\n    getTeamLeaders2,\n    getPlayoffsBracket,\n    getPlayoffSeriesLeaders\n}","export default [\n  {\n      \"isNBAFranchise\": true,\n      \"isAllStar\": false,\n      \"city\": \"Atlanta\",\n      \"altCityName\": \"Atlanta\",\n      \"fullName\": \"Atlanta Hawks\",\n      \"tricode\": \"ATL\",\n      \"teamId\": \"1610612737\",\n      \"nickname\": \"Hawks\",\n      \"urlName\": \"hawks\",\n      \"confName\": \"East\",\n      \"divName\": \"Southeast\"\n  },\n  {\n      \"isNBAFranchise\": true,\n      \"isAllStar\": false,\n      \"city\": \"Boston\",\n      \"altCityName\": \"Boston\",\n      \"fullName\": \"Boston Celtics\",\n      \"tricode\": \"BOS\",\n      \"teamId\": \"1610612738\",\n      \"nickname\": \"Celtics\",\n      \"urlName\": \"celtics\",\n      \"confName\": \"East\",\n      \"divName\": \"Atlantic\"\n  },\n  {\n      \"isNBAFranchise\": true,\n      \"isAllStar\": false,\n      \"city\": \"Brooklyn\",\n      \"altCityName\": \"Brooklyn\",\n      \"fullName\": \"Brooklyn Nets\",\n      \"tricode\": \"BKN\",\n      \"teamId\": \"1610612751\",\n      \"nickname\": \"Nets\",\n      \"urlName\": \"nets\",\n      \"confName\": \"East\",\n      \"divName\": \"Atlantic\"\n  },\n  {\n      \"isNBAFranchise\": true,\n      \"isAllStar\": false,\n      \"city\": \"Charlotte\",\n      \"altCityName\": \"Charlotte\",\n      \"fullName\": \"Charlotte Hornets\",\n      \"tricode\": \"CHA\",\n      \"teamId\": \"1610612766\",\n      \"nickname\": \"Hornets\",\n      \"urlName\": \"hornets\",\n      \"confName\": \"East\",\n      \"divName\": \"Southeast\"\n  },\n  {\n      \"isNBAFranchise\": true,\n      \"isAllStar\": false,\n      \"city\": \"Chicago\",\n      \"altCityName\": \"Chicago\",\n      \"fullName\": \"Chicago Bulls\",\n      \"tricode\": \"CHI\",\n      \"teamId\": \"1610612741\",\n      \"nickname\": \"Bulls\",\n      \"urlName\": \"bulls\",\n      \"confName\": \"East\",\n      \"divName\": \"Central\"\n  },\n  {\n      \"isNBAFranchise\": true,\n      \"isAllStar\": false,\n      \"city\": \"Cleveland\",\n      \"altCityName\": \"Cleveland\",\n      \"fullName\": \"Cleveland Cavaliers\",\n      \"tricode\": \"CLE\",\n      \"teamId\": \"1610612739\",\n      \"nickname\": \"Cavaliers\",\n      \"urlName\": \"cavaliers\",\n      \"confName\": \"East\",\n      \"divName\": \"Central\"\n  },\n  {\n      \"isNBAFranchise\": true,\n      \"isAllStar\": false,\n      \"city\": \"Dallas\",\n      \"altCityName\": \"Dallas\",\n      \"fullName\": \"Dallas Mavericks\",\n      \"tricode\": \"DAL\",\n      \"teamId\": \"1610612742\",\n      \"nickname\": \"Mavericks\",\n      \"urlName\": \"mavericks\",\n      \"confName\": \"West\",\n      \"divName\": \"Southwest\"\n  },\n  {\n      \"isNBAFranchise\": true,\n      \"isAllStar\": false,\n      \"city\": \"Denver\",\n      \"altCityName\": \"Denver\",\n      \"fullName\": \"Denver Nuggets\",\n      \"tricode\": \"DEN\",\n      \"teamId\": \"1610612743\",\n      \"nickname\": \"Nuggets\",\n      \"urlName\": \"nuggets\",\n      \"confName\": \"West\",\n      \"divName\": \"Northwest\"\n  },\n  {\n      \"isNBAFranchise\": true,\n      \"isAllStar\": false,\n      \"city\": \"Detroit\",\n      \"altCityName\": \"Detroit\",\n      \"fullName\": \"Detroit Pistons\",\n      \"tricode\": \"DET\",\n      \"teamId\": \"1610612765\",\n      \"nickname\": \"Pistons\",\n      \"urlName\": \"pistons\",\n      \"confName\": \"East\",\n      \"divName\": \"Central\"\n  },\n  {\n      \"isNBAFranchise\": true,\n      \"isAllStar\": false,\n      \"city\": \"Golden State\",\n      \"altCityName\": \"Golden State\",\n      \"fullName\": \"Golden State Warriors\",\n      \"tricode\": \"GSW\",\n      \"teamId\": \"1610612744\",\n      \"nickname\": \"Warriors\",\n      \"urlName\": \"warriors\",\n      \"confName\": \"West\",\n      \"divName\": \"Pacific\"\n  },\n  {\n      \"isNBAFranchise\": true,\n      \"isAllStar\": false,\n      \"city\": \"Houston\",\n      \"altCityName\": \"Houston\",\n      \"fullName\": \"Houston Rockets\",\n      \"tricode\": \"HOU\",\n      \"teamId\": \"1610612745\",\n      \"nickname\": \"Rockets\",\n      \"urlName\": \"rockets\",\n      \"confName\": \"West\",\n      \"divName\": \"Southwest\"\n  },\n  {\n      \"isNBAFranchise\": true,\n      \"isAllStar\": false,\n      \"city\": \"Indiana\",\n      \"altCityName\": \"Indiana\",\n      \"fullName\": \"Indiana Pacers\",\n      \"tricode\": \"IND\",\n      \"teamId\": \"1610612754\",\n      \"nickname\": \"Pacers\",\n      \"urlName\": \"pacers\",\n      \"confName\": \"East\",\n      \"divName\": \"Central\"\n  },\n  {\n      \"isNBAFranchise\": true,\n      \"isAllStar\": false,\n      \"city\": \"LA\",\n      \"altCityName\": \"LA Clippers\",\n      \"fullName\": \"LA Clippers\",\n      \"tricode\": \"LAC\",\n      \"teamId\": \"1610612746\",\n      \"nickname\": \"Clippers\",\n      \"urlName\": \"clippers\",\n      \"confName\": \"West\",\n      \"divName\": \"Pacific\"\n  },\n  {\n      \"isNBAFranchise\": true,\n      \"isAllStar\": false,\n      \"city\": \"Los Angeles\",\n      \"altCityName\": \"Los Angeles Lakers\",\n      \"fullName\": \"Los Angeles Lakers\",\n      \"tricode\": \"LAL\",\n      \"teamId\": \"1610612747\",\n      \"nickname\": \"Lakers\",\n      \"urlName\": \"lakers\",\n      \"confName\": \"West\",\n      \"divName\": \"Pacific\"\n  },\n  {\n      \"isNBAFranchise\": true,\n      \"isAllStar\": false,\n      \"city\": \"Memphis\",\n      \"altCityName\": \"Memphis\",\n      \"fullName\": \"Memphis Grizzlies\",\n      \"tricode\": \"MEM\",\n      \"teamId\": \"1610612763\",\n      \"nickname\": \"Grizzlies\",\n      \"urlName\": \"grizzlies\",\n      \"confName\": \"West\",\n      \"divName\": \"Southwest\"\n  },\n  {\n      \"isNBAFranchise\": true,\n      \"isAllStar\": false,\n      \"city\": \"Miami\",\n      \"altCityName\": \"Miami\",\n      \"fullName\": \"Miami Heat\",\n      \"tricode\": \"MIA\",\n      \"teamId\": \"1610612748\",\n      \"nickname\": \"Heat\",\n      \"urlName\": \"heat\",\n      \"confName\": \"East\",\n      \"divName\": \"Southeast\"\n  },\n  {\n      \"isNBAFranchise\": true,\n      \"isAllStar\": false,\n      \"city\": \"Milwaukee\",\n      \"altCityName\": \"Milwaukee\",\n      \"fullName\": \"Milwaukee Bucks\",\n      \"tricode\": \"MIL\",\n      \"teamId\": \"1610612749\",\n      \"nickname\": \"Bucks\",\n      \"urlName\": \"bucks\",\n      \"confName\": \"East\",\n      \"divName\": \"Central\"\n  },\n  {\n      \"isNBAFranchise\": true,\n      \"isAllStar\": false,\n      \"city\": \"Minnesota\",\n      \"altCityName\": \"Minnesota\",\n      \"fullName\": \"Minnesota Timberwolves\",\n      \"tricode\": \"MIN\",\n      \"teamId\": \"1610612750\",\n      \"nickname\": \"Timberwolves\",\n      \"urlName\": \"timberwolves\",\n      \"confName\": \"West\",\n      \"divName\": \"Northwest\"\n  },\n  {\n      \"isNBAFranchise\": true,\n      \"isAllStar\": false,\n      \"city\": \"New Orleans\",\n      \"altCityName\": \"New Orleans\",\n      \"fullName\": \"New Orleans Pelicans\",\n      \"tricode\": \"NOP\",\n      \"teamId\": \"1610612740\",\n      \"nickname\": \"Pelicans\",\n      \"urlName\": \"pelicans\",\n      \"confName\": \"West\",\n      \"divName\": \"Southwest\"\n  },\n  {\n      \"isNBAFranchise\": true,\n      \"isAllStar\": false,\n      \"city\": \"New York\",\n      \"altCityName\": \"New York\",\n      \"fullName\": \"New York Knicks\",\n      \"tricode\": \"NYK\",\n      \"teamId\": \"1610612752\",\n      \"nickname\": \"Knicks\",\n      \"urlName\": \"knicks\",\n      \"confName\": \"East\",\n      \"divName\": \"Atlantic\"\n  },\n  {\n      \"isNBAFranchise\": true,\n      \"isAllStar\": false,\n      \"city\": \"Oklahoma City\",\n      \"altCityName\": \"Oklahoma City\",\n      \"fullName\": \"Oklahoma City Thunder\",\n      \"tricode\": \"OKC\",\n      \"teamId\": \"1610612760\",\n      \"nickname\": \"Thunder\",\n      \"urlName\": \"thunder\",\n      \"confName\": \"West\",\n      \"divName\": \"Northwest\"\n  },\n  {\n      \"isNBAFranchise\": true,\n      \"isAllStar\": false,\n      \"city\": \"Orlando\",\n      \"altCityName\": \"Orlando\",\n      \"fullName\": \"Orlando Magic\",\n      \"tricode\": \"ORL\",\n      \"teamId\": \"1610612753\",\n      \"nickname\": \"Magic\",\n      \"urlName\": \"magic\",\n      \"confName\": \"East\",\n      \"divName\": \"Southeast\"\n  },\n  {\n      \"isNBAFranchise\": true,\n      \"isAllStar\": false,\n      \"city\": \"Philadelphia\",\n      \"altCityName\": \"Philadelphia\",\n      \"fullName\": \"Philadelphia 76ers\",\n      \"tricode\": \"PHI\",\n      \"teamId\": \"1610612755\",\n      \"nickname\": \"76ers\",\n      \"urlName\": \"sixers\",\n      \"confName\": \"East\",\n      \"divName\": \"Atlantic\"\n  },\n  {\n      \"isNBAFranchise\": true,\n      \"isAllStar\": false,\n      \"city\": \"Phoenix\",\n      \"altCityName\": \"Phoenix\",\n      \"fullName\": \"Phoenix Suns\",\n      \"tricode\": \"PHX\",\n      \"teamId\": \"1610612756\",\n      \"nickname\": \"Suns\",\n      \"urlName\": \"suns\",\n      \"confName\": \"West\",\n      \"divName\": \"Pacific\"\n  },\n  {\n      \"isNBAFranchise\": true,\n      \"isAllStar\": false,\n      \"city\": \"Portland\",\n      \"altCityName\": \"Portland\",\n      \"fullName\": \"Portland Trail Blazers\",\n      \"tricode\": \"POR\",\n      \"teamId\": \"1610612757\",\n      \"nickname\": \"Trail Blazers\",\n      \"urlName\": \"blazers\",\n      \"confName\": \"West\",\n      \"divName\": \"Northwest\"\n  },\n  {\n      \"isNBAFranchise\": true,\n      \"isAllStar\": false,\n      \"city\": \"Sacramento\",\n      \"altCityName\": \"Sacramento\",\n      \"fullName\": \"Sacramento Kings\",\n      \"tricode\": \"SAC\",\n      \"teamId\": \"1610612758\",\n      \"nickname\": \"Kings\",\n      \"urlName\": \"kings\",\n      \"confName\": \"West\",\n      \"divName\": \"Pacific\"\n  },\n  {\n      \"isNBAFranchise\": true,\n      \"isAllStar\": false,\n      \"city\": \"San Antonio\",\n      \"altCityName\": \"San Antonio\",\n      \"fullName\": \"San Antonio Spurs\",\n      \"tricode\": \"SAS\",\n      \"teamId\": \"1610612759\",\n      \"nickname\": \"Spurs\",\n      \"urlName\": \"spurs\",\n      \"confName\": \"West\",\n      \"divName\": \"Southwest\"\n  },\n  {\n      \"isNBAFranchise\": true,\n      \"isAllStar\": false,\n      \"city\": \"Toronto\",\n      \"altCityName\": \"Toronto\",\n      \"fullName\": \"Toronto Raptors\",\n      \"tricode\": \"TOR\",\n      \"teamId\": \"1610612761\",\n      \"nickname\": \"Raptors\",\n      \"urlName\": \"raptors\",\n      \"confName\": \"East\",\n      \"divName\": \"Atlantic\"\n  },\n  {\n      \"isNBAFranchise\": true,\n      \"isAllStar\": false,\n      \"city\": \"Utah\",\n      \"altCityName\": \"Utah\",\n      \"fullName\": \"Utah Jazz\",\n      \"tricode\": \"UTA\",\n      \"teamId\": \"1610612762\",\n      \"nickname\": \"Jazz\",\n      \"urlName\": \"jazz\",\n      \"confName\": \"West\",\n      \"divName\": \"Northwest\"\n  },\n  {\n      \"isNBAFranchise\": true,\n      \"isAllStar\": false,\n      \"city\": \"Washington\",\n      \"altCityName\": \"Washington\",\n      \"fullName\": \"Washington Wizards\",\n      \"tricode\": \"WAS\",\n      \"teamId\": \"1610612764\",\n      \"nickname\": \"Wizards\",\n      \"urlName\": \"wizards\",\n      \"confName\": \"East\",\n      \"divName\": \"Southeast\"\n  }\n]","import React, { Component } from 'react';\nimport ClipLoader from 'react-spinners/ClipLoader';\n\nclass LoadingSpinner extends Component {\n\n  render() {\n    return( \n      <div className=\"sweet-loading\">\n        <ClipLoader\n          sizeUnit={\"px\"}\n          size={150}\n          color={'Black'}\n          loading={this.props.loading}\n        />\n      </div>\n    ); \n  }\n}\n\nexport default LoadingSpinner;","import React, {Component} from 'react';\nimport ReactTable from 'react-table';\nimport nbaApi from '../../api/nbaApi';\nimport TEAMS from '../../api/teams';\nimport LoadingSpinner from '../common/LoadingSpinner';\n\nclass AllStandingsTable extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      error: null,\n      loading: true,\n      data: [],\n      columns: [{\n        Header: 'Team',\n        accessor: 'team.fullName', // String-based value accessors!\n        // width: 300\n      },\n      {\n        Header: 'Win',\n        accessor: 'win' // String-based value accessors!\n      },\n      {\n        Header: 'Loss',\n        accessor: 'loss' // String-based value accessors!\n      },\n      {\n        Header: 'Win %',\n        accessor: 'winPct' // String-based value accessors!\n      }]\n    };\n  }\n\n  componentDidMount() {\n    nbaApi.getAllStandings()\n    .then(res => {\n      const standings = res.league.standard.teams;\n      const teamStandings = standings.map(standing => {\n        standing.team = TEAMS.find(team => {\n          return standing.teamId === team.teamId;\n        })\n        return standing;\n      })\n      this.setState({\n        loading: false,\n        data: teamStandings\n      });\n    })\n    .catch(err => {\n      this.setState({\n        loading: false,\n        error: err\n      });\n    })\n  }\n\n  renderTable(loading, columns, data) {\n    if (!loading) {\n      return (\n        <div className=\"react-table\">\n          <ReactTable\n            data={data}\n            columns={columns}\n            sortable={false}\n            showPagination={false}\n            defaultPageSize={data.length}\n            loading={loading}\n          />\n        </div>\n      );\n    }\n  }\n\n  render() {\n    const { loading, columns, data } = this.state;\n\n    return (\n      <div>\n        <LoadingSpinner loading={loading}/>\n        {this.renderTable(loading, columns, data)}\n      </div>\n    );\n  }\n}\n\nexport default AllStandingsTable","import React, {Component} from 'react';\nimport ReactTable from 'react-table';\nimport nbaApi from '../../api/nbaApi';\nimport TEAMS from '../../api/teams';\nimport LoadingSpinner from '../common/LoadingSpinner';\n\nclass ConfStandingsTable extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      error: null,\n      loading: true,\n      data: {\n        eastConfStandings: [],\n        westConfStandings: []\n      },\n      columns: [\n        {\n          Header: 'Team',\n          accessor: 'team.fullName', // String-based value accessors!\n          // width: 300\n        },\n        {\n          Header: 'Win',\n          accessor: 'win' // String-based value accessors!\n        },\n        {\n          Header: 'Loss',\n          accessor: 'loss' // String-based value accessors!\n        },\n        {\n          Header: 'Win %',\n          accessor: 'winPct' // String-based value accessors!\n        }\n      ]\n    }\n  }\n\n  componentDidMount() {\n    nbaApi.getConferenceStandings()\n    .then(res => {\n      const east = res.league.standard.conference.east;\n      const west = res.league.standard.conference.west;\n      this.setState({\n        loading: false,\n        data: {\n          eastConfStandings: this.getStandings(east),\n          westConfStandings: this.getStandings(west)\n        }\n      });\n    })\n    .catch(err => {\n      this.setState({\n        loading: false,\n        error: err\n      });\n    })\n  }\n\n  getStandings(conf) {\n    console.log(conf)\n    return conf.map(standing => {\n      standing.team = TEAMS.find(team => {\n        return standing.teamId === team.teamId;\n      })\n      return standing;\n    })\n  }\n\n  renderTable(loading, columns, data, conf) {\n    if (!loading) {\n      return (\n        <div className=\"react-table\">\n          <ReactTable\n            data={data}\n            columns={[{Header: conf, columns: columns}]}\n            sortable={false}\n            showPagination={false}\n            defaultPageSize={data.length}\n            loading={loading}\n          />\n        </div>\n      );\n    }\n  }\n\n  render() {\n    const { loading, columns, data } = this.state;\n\n    return (\n      <div>\n        <LoadingSpinner loading={loading}/>\n        {this.renderTable(loading, columns, data.eastConfStandings, 'East')}\n        {this.renderTable(loading, columns, data.westConfStandings, 'West')}\n      </div>\n    );\n  }\n}\n\nexport default ConfStandingsTable","import React, {Component} from 'react';\nimport AllStandingsTable from './AllStandingsTable';\nimport ConfStandingsTable from './ConfStandingsTable';\nimport {Button, ButtonToolbar} from 'react-bootstrap';\n\nclass Standings extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeButton: 'all'\n    };\n\n    this.handleAllClick = this.handleAllClick.bind(this);\n    this.handleConfClick = this.handleConfClick.bind(this);\n    this.handleDivClick = this.handleDivClick.bind(this);\n  }\n  \n  renderButtons(activeButton) {\n    const buttonStyle = {\n      all: 'default',\n      conf: 'default',\n      div: 'default'\n    }\n\n    buttonStyle[activeButton] = 'primary';\n\n    return (\n      <div className=\"button-center\">\n        <ButtonToolbar>\n          <Button bsSize=\"large\" \n                  bsStyle={buttonStyle.all}\n                  onClick={this.handleAllClick}>\n            All\n          </Button>\n          <Button bsSize=\"large\" \n                  bsStyle={buttonStyle.conf}\n                  onClick={this.handleConfClick}>\n            Conf\n          </Button>\n          <Button bsSize=\"large\" \n                  bsStyle={buttonStyle.div}\n                  onClick={this.handleDivClick}>\n            Div\n          </Button>\n        </ButtonToolbar>\n      </div>\n    ); \n  }\n\n  renderTable(activeButton) {\n    switch(activeButton) {\n      case 'all':\n        return( \n          <AllStandingsTable />\n        ); \n      case 'conf':\n        return( \n          <ConfStandingsTable />\n        ); \n      case 'div':\n        // code block\n        break;\n      default:\n        break;\n    }\n  }\n\n  handleAllClick() {\n    this.setState(state => ({\n      activeButton: 'all'     \n    }));\n  }\n\n  handleConfClick() {\n    this.setState(state => ({\n      activeButton: 'conf'     \n    }));\n  }\n\n  handleDivClick() {\n    this.setState(state => ({\n      activeButton: 'div'\n    }));\n  }\n\n  render() {\n    const { activeButton } = this.state;\n    return (\n      <div className=\"standings\">\n        <h1 className=\"text-center\">Standings</h1>\n        {this.renderButtons(activeButton)}\n        {this.renderTable(activeButton)}\n      </div>\n    );\n  }\n}\n\nexport default Standings","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport Home from './home/Home';\nimport Standings from './standings/Standings';\n\nconst Routes = () => (\n  <Switch>\n    <Route exact path='/' component={Home}/>\n    <Route exact path='/home' component={Home}/>\n    <Route exact path='/standings' component={Standings}/>\n    {/* <Route exact path='/schedule' component={Schedule}/> */}\n  </Switch>\n)\n\nexport default Routes","import React, { Component } from 'react';\nimport Header from './common/Header';\nimport Routes from './Routes';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Header />\n        <div className=\"container-fluid\">\n          <Routes />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'react-table/react-table.css'\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from 'react-router-dom';\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}